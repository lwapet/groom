group 'fr.groom'
version '1.0'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jsonschema2pojo'

mainClassName = 'fr.groom.Main'



buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        // this plugin
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:latest.integration'
        // add additional dependencies here if you wish to reference instead of generate them (see example directory)
    }
}


repositories {
    mavenCentral()
    maven {
        name "soot-snapshot"
        url "https://soot-build.cs.uni-paderborn.de/nexus/repository/soot-snapshot"
    }
    maven {
        name "soot-release"
        url "https://soot-build.cs.uni-paderborn.de/nexus/repository/soot-release"
    }
    maven { url 'https://jitpack.io' }

  

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile project(':core')
    compile project(':database')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile 'com.github.secure-software-engineering:FlowDroid:develop-SNAPSHOT'
    //implementation 'de.tud.sse:soot-infoflow-android:2.7.2-20190403.160103-2'
    compile 'commons-io:commons-io:2.6'
     //compile group: 'ca.mcgill.sable', name: 'soot', version: '3.2.0'
    //compile "soot:3.4.0"
    
    compile group: 'ca.mcgill.sable', name: 'soot', version: '3.4.0'
    compile group: 'org.json', name: 'json', version: '20180813'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.8'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta2'
    compile group: 'org.slf4j', name: 'slf4j-nop', version: '1.8.0-beta2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    

}
// depandances with soot src
/*dependencies {
    //added to the OdileGUI version
    compile project(':core')
    //compile project(':database')
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
//    compile 'com.github.secure-software-engineering:FlowDroid:develop-SNAPSHOT'
//    implementation 'de.tud.sse:soot-infoflow-android:2.7.2-20190403.160103-2'
//   compile group: 'ca.mcgill.sable', name: 'soot', version: '3.3.0'
    compile group: 'org.json', name: 'json', version: '20180813'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.8'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta2'
    compile group: 'org.slf4j', name: 'slf4j-nop', version: '1.8.0-beta2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    //

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //implementation 'com.android.support:appcompat-v7:27.0.2'
    //implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    //testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'com.android.support.test:runner:1.0.1'
    //androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //implementation 'org.slf4j:slf4j-simple:1.7.5'
    //implementation 'org.slf4j:slf4j-api:1.7.5'
    implementation 'commons-io:commons-io:2.6'
    implementation 'de.upb.cs.swt:axml:2.0.0'
    implementation 'org.ow2.asm:asm-debug-all:5.2'
    implementation 'com.google.guava:guava:19.0'
    implementation 'de.upb.cs.swt:heros:1.1.0'
    implementation 'org.smali:dexlib2:2.2.5'
    implementation 'ca.mcgill.sable:polyglot:2006'
    implementation 'javax.annotation:javax.annotation-api:1.2'
    implementation 'javax.xml.bind:jaxb-api:2.2.4'
    implementation 'org.apache.ant:ant:1.10.1'
    implementation 'ca.mcgill.sable:jasmin:3.0.1'
}*/


configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
jar {
    baseName = 'killerdroid-static'
    version = '3.0'
    manifest {
        attributes "Main-Class": "fr.groom.Main"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
//
// Each fr.groom.configuration is set to the default value
jsonSchema2Pojo {
    includeAdditionalProperties = false
    generateBuilders = true
    usePrimitives = true

    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = files("${sourceSets.main.output.resourcesDir}/json")
    targetDirectory = file("${project.projectDir}/src/main/java")

    targetPackage = 'fr.groom.configuration'

    propertyWordDelimiters = ["-"] as char[]

    // Whether to include hashCode and equals methods in generated Java types.
    includeHashcodeAndEquals = true

    // Whether to include a toString method in generated Java types.
    includeToString = true

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jackson1 (apply annotations from the Jackson 1.x library)
    //  - gson (apply annotations from the Gson library)
    //  - moshi1 (apply annotations from the Moshi 1.x library)
    //  - none (apply no annotations at all)
    annotationStyle = 'jackson'

    // A fully qualified class name, referring to a custom annotator class that implements
    // org.jsonschema2pojo.Annotator and will be used in addition to the one chosen
    // by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
    customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    includeJsr303Annotations = false

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of JSON data)
    //  - json (documents that represent an example of the kind of JSON data that the generated Java types
    //          will be mapped to)
    //  - yamlschema (JSON schema documents, represented as YAML)
    //  - yaml (documents that represent an example of the kind of YAML (or JSON) data that the generated Java types
    //          will be mapped to)
    sourceType = 'jsonschema'

    // Whether to empty the target directory before generation occurs, to clear out all source files
    // that have been generated previously. <strong>Be warned</strong>, when activated this option
    // will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
    // directory (all files and folders)</strong> before it begins generating sources.
    removeOldOutput = false

    // The character encoding that should be used when writing the generated Java source files
    outputEncoding = 'UTF-8'

    // Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
    // date type fields to generated Java types.
    useJodaDates = false

    // Whether to add JsonFormat annotations when using Jackson 2 that cause format "date", "time", and "date-time"
    // fields to be formatted as yyyy-MM-dd, HH:mm:ss.SSS and yyyy-MM-dd'T'HH:mm:ss.SSSZ respectively. To customize these
    // patterns, use customDatePattern, customTimePattern, and customDateTimePattern config options or add these inside a
    // schema to affect an individual field
    formatDateTimes = true
    formatDates = true
    formatTimes = true

    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true

    // Whether to add a prefix to generated classes.
    classNamePrefix = ""

    // Whether to add a suffix to generated classes.
    classNameSuffix = ""

    // An array of strings that should be considered as file extensions and therefore not included in class names.
    fileExtensions = [] as String[]

    // Whether to generate constructors or not.
    includeConstructors = true;

    // **EXPERIMENTAL** Whether to make the generated types Parcelable for Android
    parcelable = false

    // Whether to make the generated types Serializable
    serializable = true


    // Whether to include getters or to omit these accessor methods and create public fields instead.
    includeGetters = true

    // Whether to include setters or to omit these accessor methods and create public fields instead.
    includeSetters = true

    // Whether to include dynamic getters, setters, and builders or to omit these methods.
    includeDynamicAccessors = false

    // Whether to include dynamic getters or to omit these methods.
    includeDynamicGetters = false

    // Whether to include dynamic setters or to omit these methods.
    includeDynamicSetters = false

    // Whether to include dynamic builders or to omit these methods.
    includeDynamicBuilders = false

    generateBuilders = false

    // What type to use instead of string when adding string properties of format "date" to Java types
    dateType = "java.time.LocalDate"

    // What type to use instead of string when adding string properties of format "date-time" to Java types
    dateTimeType = "java.time.LocalDateTime"
}
