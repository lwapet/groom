{
  "reflection": [
    "<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>",
    "<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotations()>",
    "<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>",
    "<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>",
    "<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>",
    "<java.lang.reflect.Constructor: void <init>()>",
    "<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getAnnotations()>",
    "<java.lang.reflect.Constructor: int getModifiers()>",
    "<java.lang.reflect.Constructor: boolean isVarArgs()>",
    "<java.lang.reflect.Constructor: boolean isSynthetic()>",
    "<java.lang.reflect.Constructor: java.lang.String getName()>",
    "<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>",
    "<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>",
    "<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>",
    "<java.lang.reflect.Constructor: int hashCode()>",
    "<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>",
    "<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>",
    "<java.lang.reflect.Constructor: java.lang.String toGenericString()>",
    "<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>",
    "<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>",
    "<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>",
    "<java.lang.reflect.Constructor: boolean isAnnotationPresent(java.lang.Class)>",
    "<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>",
    "<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>",
    "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>",
    "<java.lang.reflect.Constructor: java.lang.String toString()>",
    "<java.lang.reflect.Constructor: void setAccessible(boolean)>",
    "<java.lang.reflect.Method: void <init>()>",
    "<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>",
    "<java.lang.reflect.Method: int getModifiers()>",
    "<java.lang.reflect.Method: boolean isVarArgs()>",
    "<java.lang.reflect.Method: boolean isBridge()>",
    "<java.lang.reflect.Method: boolean isSynthetic()>",
    "<java.lang.reflect.Method: java.lang.String getName()>",
    "<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>",
    "<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>",
    "<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>",
    "<java.lang.reflect.Method: java.lang.Class getReturnType()>",
    "<java.lang.reflect.Method: int hashCode()>",
    "<java.lang.reflect.Method: boolean equals(java.lang.Object)>",
    "<java.lang.reflect.Method: java.lang.String toGenericString()>",
    "<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>",
    "<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>",
    "<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>",
    "<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>",
    "<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>",
    "<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>",
    "<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>",
    "<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>",
    "<java.lang.reflect.Method: java.lang.Object getDefaultValue()>",
    "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>",
    "<java.lang.reflect.Method: java.lang.String toString()>",
    "<java.lang.reflect.Field: void <init>()>",
    "<java.lang.reflect.Field: int getModifiers()>",
    "<java.lang.reflect.Field: boolean isEnumConstant()>",
    "<java.lang.reflect.Field: boolean isSynthetic()>",
    "<java.lang.reflect.Field: java.lang.String getName()>",
    "<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>",
    "<java.lang.reflect.Field: java.lang.Class getType()>",
    "<java.lang.reflect.Field: int hashCode()>",
    "<java.lang.reflect.Field: boolean equals(java.lang.Object)>",
    "<java.lang.reflect.Field: java.lang.String toGenericString()>",
    "<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
    "<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>",
    "<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>",
    "<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>",
    "<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
    "<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>",
    "<java.lang.reflect.Field: byte getByte(java.lang.Object)>",
    "<java.lang.reflect.Field: char getChar(java.lang.Object)>",
    "<java.lang.reflect.Field: double getDouble(java.lang.Object)>",
    "<java.lang.reflect.Field: float getFloat(java.lang.Object)>",
    "<java.lang.reflect.Field: int getInt(java.lang.Object)>",
    "<java.lang.reflect.Field: long getLong(java.lang.Object)>",
    "<java.lang.reflect.Field: short getShort(java.lang.Object)>",
    "<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>",
    "<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>",
    "<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>",
    "<java.lang.reflect.Field: void setChar(java.lang.Object,char)>",
    "<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>",
    "<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>",
    "<java.lang.reflect.Field: void setInt(java.lang.Object,int)>",
    "<java.lang.reflect.Field: void setLong(java.lang.Object,long)>",
    "<java.lang.reflect.Field: void setShort(java.lang.Object,short)>",
    "<java.lang.reflect.Field: java.lang.String toString()>",
    "<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>",
    "<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
    "<java.lang.reflect.TypeVariable: java.lang.String getName()>",
    "<java.lang.reflect.AccessibleObject: void <init>()>",
    "<java.lang.reflect.AccessibleObject: boolean isAccessible()>",
    "<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>",
    "<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
    "<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>",
    "<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>",
    "<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()>",
    "<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>",
    "<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>",
    "<java.lang.reflect.Member: int getModifiers()>",
    "<java.lang.reflect.Member: java.lang.String getName()>",
    "<java.lang.reflect.Member: boolean isSynthetic()>",
    "<java.lang.reflect.InvocationTargetException: void <init>()>",
    "<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>",
    "<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable,java.lang.String)>",
    "<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>",
    "<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>",
    "<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>",
    "<java.lang.reflect.Array: void <init>()>",
    "<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>",
    "<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>",
    "<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>",
    "<java.lang.reflect.Array: char getChar(java.lang.Object,int)>",
    "<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>",
    "<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>",
    "<java.lang.reflect.Array: int getInt(java.lang.Object,int)>",
    "<java.lang.reflect.Array: int getLength(java.lang.Object)>",
    "<java.lang.reflect.Array: long getLong(java.lang.Object,int)>",
    "<java.lang.reflect.Array: short getShort(java.lang.Object,int)>",
    "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>",
    "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
    "<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>",
    "<java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>",
    "<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>",
    "<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>",
    "<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>",
    "<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>",
    "<java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>",
    "<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>",
    "<java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>",
    "<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
    "<java.lang.reflect.Modifier: void <init>()>",
    "<java.lang.reflect.Modifier: int classModifiers()>",
    "<java.lang.reflect.Modifier: int constructorModifiers()>",
    "<java.lang.reflect.Modifier: int fieldModifiers()>",
    "<java.lang.reflect.Modifier: int interfaceModifiers()>",
    "<java.lang.reflect.Modifier: int methodModifiers()>",
    "<java.lang.reflect.Modifier: boolean isAbstract(int)>",
    "<java.lang.reflect.Modifier: boolean isFinal(int)>",
    "<java.lang.reflect.Modifier: boolean isInterface(int)>",
    "<java.lang.reflect.Modifier: boolean isNative(int)>",
    "<java.lang.reflect.Modifier: boolean isPrivate(int)>",
    "<java.lang.reflect.Modifier: boolean isProtected(int)>",
    "<java.lang.reflect.Modifier: boolean isPublic(int)>",
    "<java.lang.reflect.Modifier: boolean isStatic(int)>",
    "<java.lang.reflect.Modifier: boolean isStrict(int)>",
    "<java.lang.reflect.Modifier: boolean isSynchronized(int)>",
    "<java.lang.reflect.Modifier: boolean isTransient(int)>",
    "<java.lang.reflect.Modifier: boolean isVolatile(int)>",
    "<java.lang.reflect.Modifier: java.lang.String toString(int)>",
    "<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
    "<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
    "<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
    "<java.lang.reflect.Proxy: void <init>(java.lang.reflect.InvocationHandler)>",
    "<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>",
    "<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>",
    "<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>",
    "<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>",
    "<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
    "<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>"
  ],
  "runtime": [
    "<java.lang.RuntimeException: void <init>()>",
    "<java.lang.RuntimeException: void <init>(java.lang.String)>",
    "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
    "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
    "<java.lang.Runtime: void <init>()>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String)>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>",
    "<java.lang.Runtime: void exit(int)>",
    "<java.lang.Runtime: void gc()>",
    "<java.lang.Runtime: java.lang.Runtime getRuntime()>",
    "<java.lang.Runtime: void load(java.lang.String)>",
    "<java.lang.Runtime: void loadLibrary(java.lang.String)>",
    "<java.lang.Runtime: void runFinalization()>",
    "<java.lang.Runtime: void runFinalizersOnExit(boolean)>",
    "<java.lang.Runtime: void traceInstructions(boolean)>",
    "<java.lang.Runtime: void traceMethodCalls(boolean)>",
    "<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)>",
    "<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)>",
    "<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>",
    "<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>",
    "<java.lang.Runtime: void halt(int)>",
    "<java.lang.Runtime: int availableProcessors()>",
    "<java.lang.Runtime: long freeMemory()>",
    "<java.lang.Runtime: long totalMemory()>",
    "<java.lang.Runtime: long maxMemory()>"
  ],
  "crypto": [
    "<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.security.Provider,java.lang.String)>",
    "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
    "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>",
    "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>",
    "<javax.crypto.Cipher: java.security.Provider getProvider()>",
    "<javax.crypto.Cipher: java.lang.String getAlgorithm()>",
    "<javax.crypto.Cipher: int getBlockSize()>",
    "<javax.crypto.Cipher: int getOutputSize(int)>",
    "<javax.crypto.Cipher: byte[] getIV()>",
    "<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>",
    "<javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()>",
    "<javax.crypto.Cipher: void init(int,java.security.Key)>",
    "<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>",
    "<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
    "<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>",
    "<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>",
    "<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>",
    "<javax.crypto.Cipher: void init(int,java.security.cert.Certificate)>",
    "<javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom)>",
    "<javax.crypto.Cipher: byte[] update(byte[])>",
    "<javax.crypto.Cipher: byte[] update(byte[],int,int)>",
    "<javax.crypto.Cipher: int update(byte[],int,int,byte[])>",
    "<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>",
    "<javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)>",
    "<javax.crypto.Cipher: void updateAAD(byte[])>",
    "<javax.crypto.Cipher: void updateAAD(byte[],int,int)>",
    "<javax.crypto.Cipher: void updateAAD(java.nio.ByteBuffer)>",
    "<javax.crypto.Cipher: byte[] doFinal()>",
    "<javax.crypto.Cipher: int doFinal(byte[],int)>",
    "<javax.crypto.Cipher: byte[] doFinal(byte[])>",
    "<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>",
    "<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[])>",
    "<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)>",
    "<javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>",
    "<javax.crypto.Cipher: byte[] wrap(java.security.Key)>",
    "<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>",
    "<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>",
    "<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)>",
    "<javax.crypto.Mac: void <init>(javax.crypto.MacSpi,java.security.Provider,java.lang.String)>",
    "<javax.crypto.Mac: java.lang.String getAlgorithm()>",
    "<javax.crypto.Mac: java.security.Provider getProvider()>",
    "<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>",
    "<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>",
    "<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)>",
    "<javax.crypto.Mac: int getMacLength()>",
    "<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
    "<javax.crypto.Mac: void init(java.security.Key)>",
    "<javax.crypto.Mac: void update(byte)>",
    "<javax.crypto.Mac: void update(byte[],int,int)>",
    "<javax.crypto.Mac: void update(byte[])>",
    "<javax.crypto.Mac: void update(java.nio.ByteBuffer)>",
    "<javax.crypto.Mac: byte[] doFinal()>",
    "<javax.crypto.Mac: void doFinal(byte[],int)>",
    "<javax.crypto.Mac: byte[] doFinal(byte[])>",
    "<javax.crypto.Mac: void reset()>",
    "<javax.crypto.Mac: java.lang.Object clone()>",
    "<javax.crypto.ShortBufferException: void <init>(java.lang.String)>",
    "<javax.crypto.ShortBufferException: void <init>()>",
    "<javax.crypto.MacSpi: void <init>()>",
    "<javax.crypto.MacSpi: int engineGetMacLength()>",
    "<javax.crypto.MacSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
    "<javax.crypto.MacSpi: void engineUpdate(byte)>",
    "<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>",
    "<javax.crypto.MacSpi: void engineUpdate(java.nio.ByteBuffer)>",
    "<javax.crypto.MacSpi: byte[] engineDoFinal()>",
    "<javax.crypto.MacSpi: void engineReset()>",
    "<javax.crypto.MacSpi: java.lang.Object clone()>",
    "<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>",
    "<javax.crypto.NoSuchPaddingException: void <init>()>",
    "<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>",
    "<javax.crypto.IllegalBlockSizeException: void <init>()>",
    "<javax.crypto.BadPaddingException: void <init>(java.lang.String)>",
    "<javax.crypto.BadPaddingException: void <init>()>",
    "<javax.crypto.CipherSpi: void <init>()>",
    "<javax.crypto.CipherSpi: void engineSetMode(java.lang.String)>",
    "<javax.crypto.CipherSpi: void engineSetPadding(java.lang.String)>",
    "<javax.crypto.CipherSpi: int engineGetBlockSize()>",
    "<javax.crypto.CipherSpi: int engineGetOutputSize(int)>",
    "<javax.crypto.CipherSpi: byte[] engineGetIV()>",
    "<javax.crypto.CipherSpi: java.security.AlgorithmParameters engineGetParameters()>",
    "<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>",
    "<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>",
    "<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>",
    "<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>",
    "<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>",
    "<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>",
    "<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)>",
    "<javax.crypto.CipherSpi: void engineUpdateAAD(java.nio.ByteBuffer)>",
    "<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>",
    "<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>",
    "<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>",
    "<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)>",
    "<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)>",
    "<javax.crypto.CipherSpi: int engineGetKeySize(java.security.Key)>",
    "<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>",
    "<javax.crypto.ExemptionMechanism: java.lang.String getName()>",
    "<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)>",
    "<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.lang.String)>",
    "<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)>",
    "<javax.crypto.ExemptionMechanism: java.security.Provider getProvider()>",
    "<javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(java.security.Key)>",
    "<javax.crypto.ExemptionMechanism: int getOutputSize(int)>",
    "<javax.crypto.ExemptionMechanism: void init(java.security.Key)>",
    "<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.AlgorithmParameters)>",
    "<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
    "<javax.crypto.ExemptionMechanism: byte[] genExemptionBlob()>",
    "<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[])>",
    "<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[],int)>",
    "<javax.crypto.ExemptionMechanism: void finalize()>",
    "<javax.crypto.ExemptionMechanismException: void <init>(java.lang.String)>",
    "<javax.crypto.ExemptionMechanismException: void <init>()>",
    "<javax.crypto.ExemptionMechanismSpi: void <init>()>",
    "<javax.crypto.ExemptionMechanismSpi: byte[] engineGenExemptionBlob()>",
    "<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)>",
    "<javax.crypto.ExemptionMechanismSpi: int engineGetOutputSize(int)>",
    "<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key)>",
    "<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.AlgorithmParameters)>",
    "<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
    "<javax.crypto.KeyGenerator: void <init>(javax.crypto.KeyGeneratorSpi,java.security.Provider,java.lang.String)>",
    "<javax.crypto.KeyGenerator: java.lang.String getAlgorithm()>",
    "<javax.crypto.KeyGenerator: java.security.Provider getProvider()>",
    "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
    "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>",
    "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.security.Provider)>",
    "<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
    "<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>",
    "<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>",
    "<javax.crypto.KeyGenerator: void init(int)>",
    "<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
    "<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>",
    "<javax.crypto.KeyGeneratorSpi: void <init>()>",
    "<javax.crypto.KeyGeneratorSpi: javax.crypto.SecretKey engineGenerateKey()>",
    "<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>",
    "<javax.crypto.KeyGeneratorSpi: void engineInit(int,java.security.SecureRandom)>",
    "<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.SecureRandom)>",
    "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
    "<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>",
    "<javax.crypto.spec.IvParameterSpec: byte[] getIV()>",
    "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
    "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>",
    "<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()>",
    "<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()>",
    "<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>",
    "<javax.crypto.spec.SecretKeySpec: int hashCode()>",
    "<javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)>"
  ],
  "native": [
    "<java.lang.System: void loadLibrary(java.lang.String)>",
    "<java.lang.System: void load(java.lang.String)>"
  ],
  "classloader": [
    "<java.lang.ClassLoader: void <init>()>",
    "<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>",
    "<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>",
    "<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>",
    "<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>",
    "<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>",
    "<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.ClassLoader getParent()>",
    "<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>",
    "<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>",
    "<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>",
    "<java.lang.ClassLoader: void resolveClass(java.lang.Class)>",
    "<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>",
    "<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Package[] getPackages()>",
    "<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>",
    "<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>",
    "<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>",
    "<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>",
    "<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>",
    "<java.lang.ClassLoader: void clearAssertionStatus()>"
  ],
  "dex_class_loader": [
    "<dalvik.system.DexFile: void <init>(java.io.File)>",
    "<dalvik.system.DexFile: void <init>(java.lang.String)>",
    "<dalvik.system.DexFile: dalvik.system.DexFile loadDex(java.lang.String,java.lang.String,int)>",
    "<dalvik.system.DexFile: java.lang.String getName()>",
    "<dalvik.system.DexFile: java.lang.String toString()>",
    "<dalvik.system.DexFile: void close()>",
    "<dalvik.system.DexFile: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>",
    "<dalvik.system.DexFile: java.util.Enumeration entries()>",
    "<dalvik.system.DexFile: void finalize()>",
    "<dalvik.system.DexFile: boolean isDexOptNeeded(java.lang.String)>",
    "<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.ClassLoader)>",
    "<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.ClassLoader)>",
    "<dalvik.system.BaseDexClassLoader: void <init>(java.lang.String,java.io.File,java.lang.String,java.lang.ClassLoader)>",
    "<dalvik.system.BaseDexClassLoader: java.lang.Class findClass(java.lang.String)>",
    "<dalvik.system.BaseDexClassLoader: java.net.URL findResource(java.lang.String)>",
    "<dalvik.system.BaseDexClassLoader: java.util.Enumeration findResources(java.lang.String)>",
    "<dalvik.system.BaseDexClassLoader: java.lang.String findLibrary(java.lang.String)>",
    "<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)>",
    "<dalvik.system.BaseDexClassLoader: java.lang.String toString()>"
  ]
}
